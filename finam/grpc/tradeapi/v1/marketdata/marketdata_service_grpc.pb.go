// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.5.0
// source: grpc/tradeapi/v1/marketdata/marketdata_service.proto

package marketdata_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketDataServiceClient is the client API for MarketDataService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketDataServiceClient interface {
	// Получение исторических данных по инструменту (агрегированные свечи)
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/bars?timeframe=TIME_FRAME_D&interval.start_time=2023-01-01T00:00:00Z&interval.end_time=2023-01-31T23:59:59Z
	// Authorization: <token>
	//
	// Параметры:
	// - symbol - передается в URL пути
	// - timeframe и interval - передаются как query-параметры
	Bars(ctx context.Context, in *BarsRequest, opts ...grpc.CallOption) (*BarsResponse, error)
	// Получение последней котировки по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/quotes/latest
	// Authorization: <token>
	LastQuote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error)
	// Получение текущего стакана по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/orderbook
	// Authorization: <token>
	OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error)
	// Получение списка последних сделок по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/trades/latest
	// Authorization: <token>
	LatestTrades(ctx context.Context, in *LatestTradesRequest, opts ...grpc.CallOption) (*LatestTradesResponse, error)
	// Подписка на котировки по инструменту. Стрим метод
	SubscribeQuote(ctx context.Context, in *SubscribeQuoteRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeQuoteClient, error)
	// Подписка на стакан по инструменту. Стрим метод
	SubscribeOrderBook(ctx context.Context, in *SubscribeOrderBookRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeOrderBookClient, error)
	// Подписка на сделки по инструменту. Стрим метод
	SubscribeLatestTrades(ctx context.Context, in *SubscribeLatestTradesRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeLatestTradesClient, error)
}

type marketDataServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketDataServiceClient(cc grpc.ClientConnInterface) MarketDataServiceClient {
	return &marketDataServiceClient{cc}
}

func (c *marketDataServiceClient) Bars(ctx context.Context, in *BarsRequest, opts ...grpc.CallOption) (*BarsResponse, error) {
	out := new(BarsResponse)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.marketdata.MarketDataService/Bars", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) LastQuote(ctx context.Context, in *QuoteRequest, opts ...grpc.CallOption) (*QuoteResponse, error) {
	out := new(QuoteResponse)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.marketdata.MarketDataService/LastQuote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) OrderBook(ctx context.Context, in *OrderBookRequest, opts ...grpc.CallOption) (*OrderBookResponse, error) {
	out := new(OrderBookResponse)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.marketdata.MarketDataService/OrderBook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) LatestTrades(ctx context.Context, in *LatestTradesRequest, opts ...grpc.CallOption) (*LatestTradesResponse, error) {
	out := new(LatestTradesResponse)
	err := c.cc.Invoke(ctx, "/grpc.tradeapi.v1.marketdata.MarketDataService/LatestTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketDataServiceClient) SubscribeQuote(ctx context.Context, in *SubscribeQuoteRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeQuoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[0], "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeQuote", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataServiceSubscribeQuoteClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketDataService_SubscribeQuoteClient interface {
	Recv() (*SubscribeQuoteResponse, error)
	grpc.ClientStream
}

type marketDataServiceSubscribeQuoteClient struct {
	grpc.ClientStream
}

func (x *marketDataServiceSubscribeQuoteClient) Recv() (*SubscribeQuoteResponse, error) {
	m := new(SubscribeQuoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataServiceClient) SubscribeOrderBook(ctx context.Context, in *SubscribeOrderBookRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeOrderBookClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[1], "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeOrderBook", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataServiceSubscribeOrderBookClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketDataService_SubscribeOrderBookClient interface {
	Recv() (*SubscribeOrderBookResponse, error)
	grpc.ClientStream
}

type marketDataServiceSubscribeOrderBookClient struct {
	grpc.ClientStream
}

func (x *marketDataServiceSubscribeOrderBookClient) Recv() (*SubscribeOrderBookResponse, error) {
	m := new(SubscribeOrderBookResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *marketDataServiceClient) SubscribeLatestTrades(ctx context.Context, in *SubscribeLatestTradesRequest, opts ...grpc.CallOption) (MarketDataService_SubscribeLatestTradesClient, error) {
	stream, err := c.cc.NewStream(ctx, &MarketDataService_ServiceDesc.Streams[2], "/grpc.tradeapi.v1.marketdata.MarketDataService/SubscribeLatestTrades", opts...)
	if err != nil {
		return nil, err
	}
	x := &marketDataServiceSubscribeLatestTradesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MarketDataService_SubscribeLatestTradesClient interface {
	Recv() (*SubscribeLatestTradesResponse, error)
	grpc.ClientStream
}

type marketDataServiceSubscribeLatestTradesClient struct {
	grpc.ClientStream
}

func (x *marketDataServiceSubscribeLatestTradesClient) Recv() (*SubscribeLatestTradesResponse, error) {
	m := new(SubscribeLatestTradesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MarketDataServiceServer is the server API for MarketDataService service.
// All implementations must embed UnimplementedMarketDataServiceServer
// for forward compatibility
type MarketDataServiceServer interface {
	// Получение исторических данных по инструменту (агрегированные свечи)
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/bars?timeframe=TIME_FRAME_D&interval.start_time=2023-01-01T00:00:00Z&interval.end_time=2023-01-31T23:59:59Z
	// Authorization: <token>
	//
	// Параметры:
	// - symbol - передается в URL пути
	// - timeframe и interval - передаются как query-параметры
	Bars(context.Context, *BarsRequest) (*BarsResponse, error)
	// Получение последней котировки по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/quotes/latest
	// Authorization: <token>
	LastQuote(context.Context, *QuoteRequest) (*QuoteResponse, error)
	// Получение текущего стакана по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/orderbook
	// Authorization: <token>
	OrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error)
	// Получение списка последних сделок по инструменту
	// Пример HTTP запроса:
	// GET /v1/instruments/SBER@MISX/trades/latest
	// Authorization: <token>
	LatestTrades(context.Context, *LatestTradesRequest) (*LatestTradesResponse, error)
	// Подписка на котировки по инструменту. Стрим метод
	SubscribeQuote(*SubscribeQuoteRequest, MarketDataService_SubscribeQuoteServer) error
	// Подписка на стакан по инструменту. Стрим метод
	SubscribeOrderBook(*SubscribeOrderBookRequest, MarketDataService_SubscribeOrderBookServer) error
	// Подписка на сделки по инструменту. Стрим метод
	SubscribeLatestTrades(*SubscribeLatestTradesRequest, MarketDataService_SubscribeLatestTradesServer) error
	mustEmbedUnimplementedMarketDataServiceServer()
}

// UnimplementedMarketDataServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMarketDataServiceServer struct {
}

func (UnimplementedMarketDataServiceServer) Bars(context.Context, *BarsRequest) (*BarsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bars not implemented")
}
func (UnimplementedMarketDataServiceServer) LastQuote(context.Context, *QuoteRequest) (*QuoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastQuote not implemented")
}
func (UnimplementedMarketDataServiceServer) OrderBook(context.Context, *OrderBookRequest) (*OrderBookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrderBook not implemented")
}
func (UnimplementedMarketDataServiceServer) LatestTrades(context.Context, *LatestTradesRequest) (*LatestTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestTrades not implemented")
}
func (UnimplementedMarketDataServiceServer) SubscribeQuote(*SubscribeQuoteRequest, MarketDataService_SubscribeQuoteServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeQuote not implemented")
}
func (UnimplementedMarketDataServiceServer) SubscribeOrderBook(*SubscribeOrderBookRequest, MarketDataService_SubscribeOrderBookServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOrderBook not implemented")
}
func (UnimplementedMarketDataServiceServer) SubscribeLatestTrades(*SubscribeLatestTradesRequest, MarketDataService_SubscribeLatestTradesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeLatestTrades not implemented")
}
func (UnimplementedMarketDataServiceServer) mustEmbedUnimplementedMarketDataServiceServer() {}

// UnsafeMarketDataServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketDataServiceServer will
// result in compilation errors.
type UnsafeMarketDataServiceServer interface {
	mustEmbedUnimplementedMarketDataServiceServer()
}

func RegisterMarketDataServiceServer(s grpc.ServiceRegistrar, srv MarketDataServiceServer) {
	s.RegisterService(&MarketDataService_ServiceDesc, srv)
}

func _MarketDataService_Bars_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BarsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).Bars(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.marketdata.MarketDataService/Bars",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).Bars(ctx, req.(*BarsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_LastQuote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).LastQuote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.marketdata.MarketDataService/LastQuote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).LastQuote(ctx, req.(*QuoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_OrderBook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrderBookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).OrderBook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.marketdata.MarketDataService/OrderBook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).OrderBook(ctx, req.(*OrderBookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_LatestTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LatestTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketDataServiceServer).LatestTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.tradeapi.v1.marketdata.MarketDataService/LatestTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketDataServiceServer).LatestTrades(ctx, req.(*LatestTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketDataService_SubscribeQuote_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeQuoteRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).SubscribeQuote(m, &marketDataServiceSubscribeQuoteServer{stream})
}

type MarketDataService_SubscribeQuoteServer interface {
	Send(*SubscribeQuoteResponse) error
	grpc.ServerStream
}

type marketDataServiceSubscribeQuoteServer struct {
	grpc.ServerStream
}

func (x *marketDataServiceSubscribeQuoteServer) Send(m *SubscribeQuoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketDataService_SubscribeOrderBook_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeOrderBookRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).SubscribeOrderBook(m, &marketDataServiceSubscribeOrderBookServer{stream})
}

type MarketDataService_SubscribeOrderBookServer interface {
	Send(*SubscribeOrderBookResponse) error
	grpc.ServerStream
}

type marketDataServiceSubscribeOrderBookServer struct {
	grpc.ServerStream
}

func (x *marketDataServiceSubscribeOrderBookServer) Send(m *SubscribeOrderBookResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MarketDataService_SubscribeLatestTrades_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeLatestTradesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MarketDataServiceServer).SubscribeLatestTrades(m, &marketDataServiceSubscribeLatestTradesServer{stream})
}

type MarketDataService_SubscribeLatestTradesServer interface {
	Send(*SubscribeLatestTradesResponse) error
	grpc.ServerStream
}

type marketDataServiceSubscribeLatestTradesServer struct {
	grpc.ServerStream
}

func (x *marketDataServiceSubscribeLatestTradesServer) Send(m *SubscribeLatestTradesResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MarketDataService_ServiceDesc is the grpc.ServiceDesc for MarketDataService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketDataService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.tradeapi.v1.marketdata.MarketDataService",
	HandlerType: (*MarketDataServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bars",
			Handler:    _MarketDataService_Bars_Handler,
		},
		{
			MethodName: "LastQuote",
			Handler:    _MarketDataService_LastQuote_Handler,
		},
		{
			MethodName: "OrderBook",
			Handler:    _MarketDataService_OrderBook_Handler,
		},
		{
			MethodName: "LatestTrades",
			Handler:    _MarketDataService_LatestTrades_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeQuote",
			Handler:       _MarketDataService_SubscribeQuote_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeOrderBook",
			Handler:       _MarketDataService_SubscribeOrderBook_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeLatestTrades",
			Handler:       _MarketDataService_SubscribeLatestTrades_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/tradeapi/v1/marketdata/marketdata_service.proto",
}
